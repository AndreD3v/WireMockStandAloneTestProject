{
	"info": {
		"_postman_id": "140ae593-9637-47ab-9e13-606993725e31",
		"name": "WireMock StandAlone",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET /api/test?name=Andre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(request.name + \" - Does return name\", function () {\r",
							"    let actualResponseBody = pm.response.json();\r",
							"    pm.expect(actualResponseBody.name).to.equal(\"James\");\r",
							"    pm.expect(actualResponseBody.job).to.equal(\"Test Engineer\");\r",
							"    pm.expect(actualResponseBody.level).to.equal(\"Senior\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/api/test?name=Andre",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"test"
					],
					"query": [
						{
							"key": "name",
							"value": "Andre"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api/somethingElse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(request.name + \" - Does return msg\", function () {\r",
							"    let actualResponseBody = pm.response.json();\r",
							"    pm.expect(actualResponseBody.msg).to.equal(\"used get with wildcard\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/api/somethingElse",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"somethingElse"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api/abc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(request.name + \" - Does return result\", function () {\r",
							"    let actualResponseBody = pm.response.json();\r",
							"    pm.expect(actualResponseBody.result).to.equal(\"path contained 'abc'\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/api/abc",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"abc"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /api/data including newspark",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(request.name + \" - Does return result\", function () {\r",
							"    let actualResponseBody = pm.response.json();\r",
							"    pm.expect(actualResponseBody.result).to.equal(\"data posted with newspark - 201\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"employer\" : \"newspark\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/data",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"data"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /api/data not including newspark",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(request.name + \" - Does return result\", function () {\r",
							"    let actualResponseBody = pm.response.json();\r",
							"    pm.expect(actualResponseBody.result).to.equal(\"data posted without certain content - 201\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"employer\" : \"lorem ip\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/data",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"data"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /api/data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(request.name + \" - Does not return a body\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/api/data",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"data"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (request.method === 'GET') {",
					"",
					"    pm.test(request.name + \" - Does return statuscode 200\", function () {",
					"        pm.response.to.have.status(200);",
					"    });",
					"}",
					"",
					"if (request.method === 'POST') {",
					"",
					"    pm.test(request.name + \" - Does return statuscode 201\", function () {",
					"        pm.response.to.have.status(201);",
					"    });",
					"}",
					"",
					"if (request.method === 'DELETE') {",
					"",
					"    pm.test(request.name + \" - Does return statuscode 204\", function () {",
					"        pm.response.to.have.status(204);",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "port",
			"value": "8079",
			"type": "default"
		}
	]
}